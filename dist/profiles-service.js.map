{"version":3,"file":"profiles-service.js","sourceRoot":"","sources":["../src/profiles-service.ts"],"names":[],"mappings":"AAIA,MAAM,OAAO,eAAe;IAC1B,YAAmB,UAAsB,EAAS,WAAW,UAAU;QAApD,eAAU,GAAV,UAAU,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAa;IAAG,CAAC;IAE3E;;;OAGG;IACH,KAAK,CAAC,YAAY;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CAAC,WAAwB;QAC5C,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,iBAAiB,CAAC,YAA2B;QACjD,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,YAAY,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAAC,cAAsB;QACzC,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;YACtC,eAAe,EAAE,cAAc;SAChC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa,CAAC,OAAgB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa,CAAC,OAAgB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAEO,QAAQ,CAAC,OAAe,EAAE,OAAY;QAC5C,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnE,CAAC;CACF","sourcesContent":["import { CellClient } from '@holochain-open-dev/cell-client';\nimport { AgentPubKey, Record } from '@holochain/client';\nimport { Profile } from './types';\n\nexport class ProfilesService {\n  constructor(public cellClient: CellClient, public zomeName = 'profiles') {}\n\n  /**\n   * Get my profile, if it has been created\n   * @returns my profile\n   */\n  async getMyProfile(): Promise<Record> {\n    return this.callZome('get_my_profile', null);\n  }\n\n  /**\n   * Get the profile for the given agent, if they have created it\n   *\n   * @param agentPubKey the agent to get the profile for\n   * @returns the profile of the agent\n   */\n  async getAgentProfile(agentPubKey: AgentPubKey): Promise<Record | undefined> {\n    return this.callZome('get_agent_profile', agentPubKey);\n  }\n\n  /**\n   * Get the profiles for the given agent\n   *\n   * @param agentPubKeys the agents to get the profile for\n   * @returns the profile of the agents, in the same order as the input parameters\n   */\n  async getAgentsProfiles(agentPubKeys: AgentPubKey[]): Promise<Record[]> {\n    return this.callZome('get_agents_profiles', agentPubKeys);\n  }\n\n  /**\n   * Search profiles that start with nicknamePrefix\n   *\n   * @param nicknamePrefix must be of at least 3 characters\n   * @returns the profiles with the nickname starting with nicknamePrefix\n   */\n  async searchProfiles(nicknamePrefix: string): Promise<Array<Record>> {\n    return this.callZome('search_profiles', {\n      nickname_prefix: nicknamePrefix,\n    });\n  }\n\n  /**\n   * Get the profiles for all the agents in the DHT\n   *\n   * @returns the profiles for all the agents in the DHT\n   */\n  async getAllProfiles(): Promise<Record[]> {\n    return this.callZome('get_all_profiles', null);\n  }\n\n  /**\n   * Create my profile\n   *\n   * @param profile the profile to create\n   * @returns my profile with my agentPubKey\n   */\n  async createProfile(profile: Profile): Promise<Record> {\n    return this.callZome('create_profile', profile);\n  }\n\n  /**\n   * Update my profile\n   *\n   * @param profile the profile to create\n   * @returns my profile with my agentPubKey\n   */\n  async updateProfile(profile: Profile): Promise<Record> {\n    return this.callZome('update_profile', profile);\n  }\n\n  private callZome(fn_name: string, payload: any) {\n    return this.cellClient.callZome(this.zomeName, fn_name, payload);\n  }\n}\n"]}