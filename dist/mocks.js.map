{"version":3,"file":"mocks.js","sourceRoot":"","sources":["../src/mocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAC7D,OAAO,EAEL,eAAe,GAEhB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAEpE,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAG1C,MAAM,KAAK,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAE9E,MAAM,OAAO,gBAAiB,SAAQ,UAAU;IAC9C,YACY,SAA+B,IAAI,WAAW,EAAE,EAChD,UAAkB,GAAG;QAE/B,KAAK,CAAC,IAAW,EAAE;YACjB,OAAO,EAAE;gBACP,eAAe,CAAC,kDAAkD,CAAC;gBACnE,eAAe,CAAC,kDAAkD,CAAC;aACpE;YACD,OAAO,EAAE,UAAU;SACpB,CAAC,CAAC;QATO,WAAM,GAAN,MAAM,CAA0C;QAChD,YAAO,GAAP,OAAO,CAAc;IASjC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,cAAc,CAAC,EAAE,QAAQ,EAAwB;QAC/C,MAAM,OAAO,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;QACzC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAExC,OAAO,UAAU,CAAC;YAChB,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;YACtB,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,EAAE,eAAe,EAA+B;QAC9D,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAClC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACzD,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,iBAAiB,CAAC,aAA0B;QAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,MAAM;aACf,MAAM,EAAE;aACR,GAAG,CAAC,OAAO,CAAC,EAAE,CACb,UAAU,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAC1D,CAAC;IACN,CAAC;IAED,KAAK,CAAC,QAAQ,CACZ,QAAgB,EAChB,MAAc,EACd,OAAY,EACZ,OAAgB;QAEhB,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1B,OAAQ,IAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACD,gBAAgB,CAAC,aAA0B;QACzC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import { CellClient } from '@holochain-open-dev/cell-client';\nimport {\n  AgentPubKeyB64,\n  deserializeHash,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport { fakeRecord, HoloHashMap } from '@holochain-open-dev/utils';\nimport { AgentPubKey, AppSignalCb, Record } from '@holochain/client';\nimport { encode } from '@msgpack/msgpack';\nimport { Profile } from './types';\n\nconst sleep = (ms: number) => new Promise(r => setTimeout(() => r(null), ms));\n\nexport class ProfilesZomeMock extends CellClient {\n  constructor(\n    protected agents: HoloHashMap<Profile> = new HoloHashMap(),\n    protected latency: number = 500\n  ) {\n    super(null as any, {\n      cell_id: [\n        deserializeHash('uhC0kkSpFl08_2D0Pvw2vEVEkfSgDVZCkyOf1je6qIdClO1o'),\n        deserializeHash('uhCAk6oBoqygFqkDreZ0V0bH4R9cTN1OkcEG78OLxVptLWOI'),\n      ],\n      role_id: 'profiles',\n    });\n  }\n\n  get myPubKey() {\n    return this.cell.cell_id[1];\n  }\n\n  create_profile({ nickname }: { nickname: string }): Record {\n    const profile = { nickname, fields: {} };\n    this.agents.put(this.myPubKey, profile);\n\n    return fakeRecord({\n      entry: encode(profile),\n      entry_type: 'App',\n    });\n  }\n\n  search_profiles({ nickname_prefix }: { nickname_prefix: string }) {\n    return this.agents.pickBy(profile =>\n      profile.nickname.startsWith(nickname_prefix.slice(0, 3))\n    );\n  }\n\n  get_my_profile() {\n    return this.agents.get(this.myPubKey);\n  }\n\n  get_agent_profile(agent_address: AgentPubKey) {\n    return this.agents.get(agent_address);\n  }\n\n  get_all_profiles() {\n    return this.agents\n      .values()\n      .map(profile =>\n        fakeRecord({ entry: encode(profile), entry_type: 'App' })\n      );\n  }\n\n  async callZome(\n    zomeName: string,\n    fnName: string,\n    payload: any,\n    timeout?: number\n  ): Promise<any> {\n    await sleep(this.latency);\n    return (this as any)[fnName](payload);\n  }\n  addSignalHandler(signalHandler: AppSignalCb): { unsubscribe: () => void } {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}