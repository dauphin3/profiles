{"version":3,"file":"search-agent.js","sourceRoot":"","sources":["../../src/elements/search-agent.ts"],"names":[],"mappings":"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","sourcesContent":["import { property, state, query } from 'lit/decorators.js';\nimport { css, html, LitElement } from 'lit';\nimport {\n  MenuSurface,\n  List,\n  ListItem,\n  TextField,\n} from '@scoped-elements/material-web';\nimport { AgentPubKey } from '@holochain/client';\nimport { contextProvided } from '@lit-labs/context';\nimport { ScopedElementsMixin } from '@open-wc/scoped-elements';\nimport { msg } from '@lit/localize';\nimport { isEqual } from 'lodash-es';\nimport { HoloHashMap } from '@holochain-open-dev/utils';\n\nimport { Profile } from '../types';\nimport { sharedStyles } from './utils/shared-styles';\nimport { ProfilesStore } from '../profiles-store';\nimport { profilesStoreContext } from '../context';\nimport { AgentAvatar } from './agent-avatar';\n\n/**\n * @element search-agent\n * @fires agent-selected - Fired when the user selects some agent. Detail will have this shape: { agentPubKey: 'uhCAkSEspAJks5Q8863Jg1RJhuJHJpFWzwDJkxVjVSk9JueU' }\n */\nexport class SearchAgent extends ScopedElementsMixin(LitElement) {\n  /** Public attributes */\n\n  /**\n   * Whether to clear the field when an agent is selected.\n   * @attr clear-on-select\n   */\n  @property({ type: Boolean, attribute: 'clear-on-select' })\n  clearOnSelect = false;\n\n  /**\n   * Whether to include my own agent as a possible agent to select.\n   * @attr include-myself\n   */\n  @property({ type: Boolean, attribute: 'include-myself' })\n  includeMyself = false;\n\n  /**\n   * Label for the agent searching field.\n   * @attr field-label\n   */\n  @property({ type: String, attribute: 'field-label' })\n  fieldLabel: string | undefined;\n\n  /** Dependencies */\n\n  /**\n   * `ProfilesStore` that is requested via context.\n   * Only set this property if you want to override the store requested via context.\n   */\n  @contextProvided({ context: profilesStoreContext, subscribe: true })\n  @property({ type: Object })\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  private _knownProfiles: HoloHashMap<Profile> = new HoloHashMap();\n\n  private get _filteredAgents() {\n    const profiles = this._knownProfiles.pickBy(\n      (value, key) =>\n        !isEqual(key, this.store.myAgentPubKey) || this.includeMyself\n    );\n\n    return profiles\n      .pickBy((profile, key) =>\n        profile.nickname\n          .toLowerCase()\n          .startsWith(this._currentFilter?.toLowerCase() as string)\n      )\n      .entries();\n  }\n\n  @state()\n  private _currentFilter: string | undefined = undefined;\n\n  private _lastSearchedPrefix: string | undefined = undefined;\n\n  @query('#textfield')\n  private _textField!: TextField;\n  @query('#overlay')\n  private _overlay!: MenuSurface;\n\n  firstUpdated() {\n    this.addEventListener('blur', () => this._overlay.close());\n  }\n\n  async searchAgents(nicknamePrefix: string): Promise<void> {\n    this._lastSearchedPrefix = nicknamePrefix;\n    const profiles = await this.store.searchProfiles(nicknamePrefix);\n\n    this._knownProfiles = new HoloHashMap([\n      ...this._knownProfiles.entries(),\n      ...profiles.entries(),\n    ]);\n\n    this.requestUpdate();\n  }\n\n  onFilterChange() {\n    if (this._textField.value.length < 3) return;\n\n    this._overlay.show();\n\n    this._currentFilter = this._textField.value;\n\n    const filterPrefix = this._currentFilter.slice(0, 3);\n    if (filterPrefix !== this._lastSearchedPrefix) {\n      this.searchAgents(filterPrefix);\n    }\n  }\n\n  onUsernameSelected(agent: any) {\n    // If nickname matches agent, user has selected it\n    if (agent) {\n      this.dispatchEvent(\n        new CustomEvent('agent-selected', {\n          detail: {\n            agentPubKey: agent[0],\n          },\n        })\n      );\n\n      // If the consumer says so, clear the field\n      if (this.clearOnSelect) {\n        this._textField.value = '';\n        this._currentFilter = undefined;\n      } else {\n        this._textField.value = agent[1].nickname;\n      }\n      this._overlay.close();\n    }\n  }\n\n  render() {\n    return html`\n      <div style=\"position: relative; flex: 1; display: flex;\">\n        <mwc-textfield\n          id=\"textfield\"\n          style=\"flex: 1;\"\n          class=\"input\"\n          .label=${this.fieldLabel ?? msg('Search agent')}\n          .placeholder=${msg('At least 3 chars...')}\n          outlined\n          @input=${() => this.onFilterChange()}\n          @focus=${() => this._currentFilter && this._overlay.show()}\n        >\n        </mwc-textfield>\n        <mwc-menu-surface absolute id=\"overlay\" x=\"4\" y=\"28\">\n          ${this._filteredAgents.length > 0\n            ? html`\n                <mwc-list\n                  style=\"min-width: 80px;\"\n                  @selected=${(e: CustomEvent) =>\n                    this.onUsernameSelected(\n                      this._filteredAgents[e.detail.index]\n                    )}\n                >\n                  ${this._filteredAgents.map(\n                    ([pubkey, profile]) => html` <mwc-list-item\n                      graphic=\"avatar\"\n                      style=\"--mdc-list-item-graphic-size: 32px;\"\n                    >\n                      <agent-avatar\n                        slot=\"graphic\"\n                        .agentPubKey=${pubkey}\n                      ></agent-avatar>\n                      <span style=\"margin-left: 8px;\">${profile.nickname}</span>\n                    </mwc-list-item>`\n                  )}\n                </mwc-list>\n              `\n            : html`<mwc-list-item\n                >${msg('No agents match the filter')}</mwc-list-item\n              >`}\n        </mwc-menu-surface>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n        #list {\n          margin-top: 16px;\n          margin-left: 16px;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * @ignore\n   */\n  static get scopedElements() {\n    return {\n      'agent-avatar': AgentAvatar,\n      'mwc-textfield': TextField,\n      'mwc-menu-surface': MenuSurface,\n      'mwc-list': List,\n      'mwc-list-item': ListItem,\n    };\n  }\n}\n"]}