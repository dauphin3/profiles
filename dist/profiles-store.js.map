{"version":3,"file":"profiles-store.js","sourceRoot":"","sources":["../src/profiles-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { HoloHashMap } from '@holochain-open-dev/utils';\nimport merge from 'lodash-es/merge';\nimport isEqual from 'lodash-es/isEqual';\nimport { writable, Writable, derived, Readable, get } from 'svelte/store';\nimport { AgentPubKey, Record } from '@holochain/client';\nimport { decode } from '@msgpack/msgpack';\n\nimport { ProfilesService } from './profiles-service';\nimport { Profile } from './types';\nimport { defaultConfig, ProfilesConfig } from './config';\n\nexport class ProfilesStore {\n  /** Private */\n  private _knownProfilesStore: Writable<HoloHashMap<Profile>> = writable(new HoloHashMap());\n\n  /** Static info */\n  public myAgentPubKey: AgentPubKey;\n\n  config: ProfilesConfig;\n\n  constructor(\n    protected service: ProfilesService,\n    config: Partial<ProfilesConfig> = {}\n  ) {\n    this.config = merge(defaultConfig, config);\n    this.myAgentPubKey = service.cellClient.cell.cell_id[1];\n  }\n\n  /** Actions */\n\n  /**\n   * Fetches the profiles for all agents in the DHT\n   *\n   * Warning! Can be very slow\n   */\n  async fetchAllProfiles(): Promise<Readable<HoloHashMap<Profile>>> {\n    const allProfiles = await this.service.getAllProfiles();\n\n    this._knownProfilesStore.update(profiles => {\n      for (const record of allProfiles) {\n        profiles.put(\n          record.signed_action.hashed.content.author,\n          decode((record.entry as any).Present.entry) as Profile\n        );\n      }\n      return profiles;\n    });\n\n    return derived(this._knownProfilesStore, i => i);\n  }\n\n  /**\n   * Fetches the profile for the given agent\n   */\n  async fetchAgentProfile(\n    agentPubKey: AgentPubKey\n  ): Promise<Readable<Profile | undefined>> {\n    // For now, optimistic return of the cached profile\n    // TODO: implement cache invalidation\n\n    const knownProfiles = get(this._knownProfilesStore);\n\n    if (!knownProfiles.get(agentPubKey)) {\n      const record = await this.service.getAgentProfile(agentPubKey);\n\n      if (record) {\n        this._knownProfilesStore.update(profiles => {\n          profiles.put(\n            record.signed_action.hashed.content.author,\n            decode((record.entry as any).Present.entry) as Profile\n          );\n          return profiles;\n        });\n      }\n    }\n\n    return derived(this._knownProfilesStore, profiles =>\n      profiles.get(agentPubKey)\n    );\n  }\n\n  /**\n   * Fetches the profiles for the given agents in the DHT\n   *\n   * You can subscribe to knowProfiles to get updated with all the profiles when this call is done\n   *\n   * Use this over `fetchAgentProfile` when fetching multiple profiles, as it will be more performant\n   */\n  async fetchAgentsProfiles(\n    agentPubKeys: AgentPubKey[]\n  ): Promise<Readable<HoloHashMap<Profile>>> {\n    // For now, optimistic return of the cached profile\n    // TODO: implement cache invalidation\n\n    const knownProfiles = get(this._knownProfilesStore);\n\n    const profilesToFetch = agentPubKeys.filter(\n      pubKey => !knownProfiles.has(pubKey)\n    );\n\n    if (profilesToFetch.length > 0) {\n      const fetchedProfiles = await this.service.getAgentsProfiles(\n        profilesToFetch\n      );\n\n      this._knownProfilesStore.update(profiles => {\n        for (const fetchedProfile of fetchedProfiles) {\n          profiles.put(\n            fetchedProfile.signed_action.hashed.content.author,\n            decode((fetchedProfile.entry as any).Present.entry) as Profile\n          );\n        }\n        return profiles;\n      });\n    }\n\n    return derived(this._knownProfilesStore, knownProfiles =>\n      knownProfiles.pick(a => !!agentPubKeys.find(pubkey => isEqual(pubkey, a)))\n    );\n  }\n\n  /**\n   * Fetch my profile\n   *\n   * You can subscribe to `myProfile` to get updated with my profile\n   */\n  async fetchMyProfile(): Promise<Readable<Profile | undefined>> {\n    const profile = await this.service.getMyProfile();\n    if (profile) {\n      this._knownProfilesStore.update(profiles => {\n        profiles.put(\n          profile.signed_action.hashed.content.author,\n          decode((profile.entry as any).Present.entry) as Profile\n        );\n        return profiles;\n      });\n    }\n\n    return derived(\n      this._knownProfilesStore,\n      s => s.get(this.myAgentPubKey)\n    );\n  }\n\n  /**\n   * Search the profiles for the agent with nicknames starting with the given nicknamePrefix\n   *\n   * @param nicknamePrefix must be of at least 3 characters\n   * @returns the profiles with the nickname starting with nicknamePrefix\n   */\n  async searchProfiles(nicknamePrefix: string): Promise<HoloHashMap<Profile>> {\n    const searchedProfiles = await this.service.searchProfiles(nicknamePrefix);\n    const byPubKey: HoloHashMap<Profile> = new HoloHashMap();\n    this._knownProfilesStore.update(profiles => {\n      for (const profile of searchedProfiles) {\n        byPubKey.put(\n          profile.signed_action.hashed.content.author,\n          decode((profile.entry as any).Present.entry) as Profile\n        );\n        profiles.put(\n          profile.signed_action.hashed.content.author,\n          decode((profile.entry as any).Present.entry) as Profile\n        );\n      }\n      return profiles;\n    });\n\n    return byPubKey;\n  }\n\n  /**\n   * Create my profile\n   *\n   * Note that there is no guarantee on nickname uniqness\n   *\n   * @param profile profile to be created\n   */\n  async createProfile(profile: Profile): Promise<void> {\n    await this.service.createProfile(profile);\n\n    this._knownProfilesStore.update(profiles => {\n      profiles.put(this.myAgentPubKey, profile);\n      return profiles;\n    });\n  }\n\n  /**\n   * Update my profile\n   *\n   * @param profile profile to be created\n   */\n  async updateProfile(profile: Profile): Promise<void> {\n    await this.service.updateProfile(profile);\n\n    this._knownProfilesStore.update(profiles => {\n      profiles.put(this.myAgentPubKey, profile);\n      return profiles;\n    });\n  }\n}\n"]}